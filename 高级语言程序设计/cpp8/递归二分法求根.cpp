/*2151974 软件 赵明泽*/
#include <iostream>
#include <iomanip>
#include <cmath> 
using namespace std;

/* ----具体要求----
   1、不允许添加其它头文件
   2、不允许定义全局变量、静态局部变量
   3、不允许添加其它函数
   4、整个程序不允许出现任何形式的循环
   ---------------------------------------------------------------------
*/

/***************************************************************************
  函数名称：
  功    能：给定x，返回函数 y=2x^3-9x^2+12-3的值
  输入参数：
  返 回 值：
  说    明：f函数不准动
***************************************************************************/
double f(double x)
{
	return (2 * x * x * x - 9 * x * x + 12 * x - 3);
}

/***************************************************************************
  函数名称：
  功    能：递归方式求方程 y=2x^3-9x^2+12x-3 在[x1-x2]区间的根并打印
  输入参数：
  返 回 值：
  说    明：1、函数名、形参、返回类型均不准动
			2、不允许出现任何形式的循环
			3、输出保留小数点后3位
			4、思考：为什么不定义函数返回类型为double，然后在main中打印方程的根？（本问题的思考答案，以多行注释形式写在源程序的最后，分数占本题20%）
***************************************************************************/
void fun(double x1, double x2)
{
	cout << setiosflags(ios::fixed) << setprecision(3);

	if (fabs(f(x1)) < 1e-6)
	{
		cout << "x=" << x1 << endl;
		return;
	}
	if (fabs(f(x2)) < 1e-6)
	{
		cout << "x=" << x2 << endl;
		return;
	}
	if (f(x1 + (x2 - x1) / 2.0) * f(x2) > 0)
	{
		x2 = x2 - (x2 - x1) / 2.0;
	}
	else if (f(x2 - (x2 - x1) / 2.0) * f(x1) > 0)
	{
		x1 = x1 + (x2 - x1) / 2.0;
	}
	fun(x1, x2);
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：main函数不准动
***************************************************************************/
int main()
{
	fun(0, 1);
	return 0;
}

/* --- 此处给出思考题的答案，如果能给出 double fun(double x1, double x2) 形式的实现，也可以贴在注释中 ---
我的理解是：
过程中需要多次求方程的值并判断，写成一个函数可以节省代码，避免重复性
如果发现后续有错误，容易修改，对程序员比较友好
另外，判断二分法的取点的条件比较复杂，如果直接写，代码会很长，也会很乱，容易出错
可能并不能减小误差

double fun(double x1, double x2)
{
	cout << setiosflags(ios::fixed) << setprecision(3);

	if (fabs(2 * x1 * x1 * x1 - 9 * x1 * x1 + 12 * x1 - 3) < 1e-6)
	{
		cout << "x=";
		return x1;
	}
	if (fabs(2 * x2 * x2 * x2 - 9 * x2 * x2 + 12 * x2 - 3) < 1e-6)
	{
		cout << "x=";
		return x2;
	}
	//2 * x * x * x - 9 * x * x + 12 * x - 3
	//(x1 + (x2 - x1) / 2.0)
	//(x2 - (x2 - x1) / 2.0)
	if (2 * (x1 + (x2 - x1) / 2.0) * (x1 + (x2 - x1) / 2.0) * (x1 + (x2 - x1) / 2.0) - 9 * (x1 + (x2 - x1) / 2.0) * (x1 + (x2 - x1) / 2.0) + 12 * (x1 + (x2 - x1) / 2.0) - 3 * ( 2 * x2 * x2 * x2 - 9 * x2 * x2 + 12 * x2 - 3 ) > 0)
	{
		x2 = x2 - (x2 - x1) / 2.0;
	}
	else if (2 * (x2 - (x2 - x1) / 2.0) * (x2 - (x2 - x1) / 2.0) * (x2 - (x2 - x1) / 2.0) - 9 * (x2 - (x2 - x1) / 2.0) * (x2 - (x2 - x1) / 2.0) + 12 * (x2 - (x2 - x1) / 2.0) - 3 * (2 * x1 * x1 * x1 - 9 * x1 * x1 + 12 * x1 - 3) > 0)
	{
		x1 = x1 + (x2 - x1) / 2.0;
	}
	fun(x1, x2);
}

int main()
{
	fun(0, 1);
	cout << endl;
	return 0;
}

*/